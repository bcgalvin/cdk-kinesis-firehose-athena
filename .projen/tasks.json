{
  "tasks": {
    "build": {
      "name": "build",
      "description": "Full release build",
      "steps": [
        {
          "spawn": "default"
        },
        {
          "spawn": "pre-compile"
        },
        {
          "spawn": "compile"
        },
        {
          "spawn": "post-compile"
        },
        {
          "spawn": "test"
        },
        {
          "spawn": "package"
        }
      ]
    },
    "clobber": {
      "name": "clobber",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": {
        "BRANCH": "$(git branch --show-current)"
      },
      "steps": [
        {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in \"scratch\" branch"
        },
        {
          "exec": "git checkout $BRANCH"
        },
        {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin"
        },
        {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit"
        },
        {
          "exec": "git clean -fdx",
          "name": "clean all untracked files"
        },
        {
          "say": "ready to rock! (unpushed commits are under the \"scratch\" branch)"
        }
      ],
      "condition": "git diff --exit-code > /dev/null"
    },
    "compat": {
      "name": "compat",
      "description": "Perform API compatibility check against latest version",
      "steps": [
        {
          "exec": "jsii-diff npm:$(node -p \"require('./package.json').name\") -k --ignore-file .compatignore || (echo \"\nUNEXPECTED BREAKING CHANGES: add keys such as 'removed:constructs.Node.of' to .compatignore to skip.\n\" && exit 1)"
        }
      ]
    },
    "compile": {
      "name": "compile",
      "description": "Only compile",
      "steps": [
        {
          "exec": "jsii --silence-warnings=reserved-word --no-fix-peer-dependencies"
        }
      ]
    },
    "default": {
      "name": "default",
      "description": "Synthesize project files",
      "steps": [
        {
          "exec": "node .projenrc.js"
        }
      ]
    },
    "docgen": {
      "name": "docgen",
      "description": "Generate API.md from .jsii manifest",
      "steps": [
        {
          "exec": "jsii-docgen -o API.md"
        }
      ]
    },
    "eject": {
      "name": "eject",
      "description": "Remove projen from the project",
      "env": {
        "PROJEN_EJECTING": "true"
      },
      "steps": [
        {
          "spawn": "default"
        }
      ]
    },
    "eslint": {
      "name": "eslint",
      "description": "Runs eslint against the codebase",
      "steps": [
        {
          "exec": "eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern src test build-tools .projenrc.js"
        }
      ]
    },
    "format": {
      "name": "format",
      "description": "Format with prettier",
      "steps": [
        {
          "exec": "prettier --write src/{**/,}*.ts test/{**/,}*.ts .projenrc.js README.md"
        }
      ]
    },
    "integ:seeder:assert": {
      "name": "integ:seeder:assert",
      "description": "assert the snapshot of integration test 'seeder'",
      "steps": [
        {
          "exec": "[ -d \"test/seeder.integ.snapshot\" ] || (echo \"No snapshot available for integration test 'seeder'. Run 'projen integ:seeder:deploy' to capture.\" && exit 1)"
        },
        {
          "exec": "cdk synth --app \"ts-node -P tsconfig.dev.json test/seeder.integ.ts\" --no-version-reporting --no-asset-metadata --no-path-metadata -o test/.tmp/seeder.integ/assert.cdk.out > /dev/null"
        },
        {
          "exec": "diff -r -x asset.* -x cdk.out -x manifest.json -x tree.json test/seeder.integ.snapshot/ test/.tmp/seeder.integ/assert.cdk.out/"
        }
      ]
    },
    "integ:seeder:deploy": {
      "name": "integ:seeder:deploy",
      "description": "deploy integration test 'seeder' and capture snapshot",
      "steps": [
        {
          "exec": "rm -fr test/.tmp/seeder.integ/deploy.cdk.out"
        },
        {
          "exec": "cdk deploy --app \"ts-node -P tsconfig.dev.json test/seeder.integ.ts\" --no-version-reporting --no-asset-metadata --no-path-metadata '**' --require-approval=never -o test/.tmp/seeder.integ/deploy.cdk.out"
        },
        {
          "exec": "rm -fr test/seeder.integ.snapshot"
        },
        {
          "exec": "mv test/.tmp/seeder.integ/deploy.cdk.out test/seeder.integ.snapshot"
        },
        {
          "spawn": "integ:seeder:destroy"
        }
      ]
    },
    "integ:seeder:destroy": {
      "name": "integ:seeder:destroy",
      "description": "destroy integration test 'seeder'",
      "steps": [
        {
          "exec": "cdk destroy --app test/seeder.integ.snapshot '**' --no-version-reporting"
        }
      ]
    },
    "integ:seeder:snapshot": {
      "name": "integ:seeder:snapshot",
      "description": "update snapshot for integration test \"seeder\"",
      "steps": [
        {
          "exec": "cdk synth --app \"ts-node -P tsconfig.dev.json test/seeder.integ.ts\" --no-version-reporting --no-asset-metadata --no-path-metadata -o test/seeder.integ.snapshot > /dev/null"
        }
      ]
    },
    "integ:seeder:watch": {
      "name": "integ:seeder:watch",
      "description": "watch integration test 'seeder' (without updating snapshots)",
      "steps": [
        {
          "exec": "cdk watch --app \"ts-node -P tsconfig.dev.json test/seeder.integ.ts\" --no-version-reporting --no-asset-metadata --no-path-metadata '**' -o test/.tmp/seeder.integ/deploy.cdk.out"
        }
      ]
    },
    "integ:snapshot-all": {
      "name": "integ:snapshot-all",
      "description": "update snapshot for all integration tests",
      "steps": [
        {
          "spawn": "integ:seeder:snapshot"
        }
      ]
    },
    "package": {
      "name": "package",
      "description": "Creates the distribution package",
      "steps": [
        {
          "exec": "go env -w GOSUMDB=off"
        },
        {
          "exec": "if [ ! -z ${CI} ]; then mkdir -p dist && rsync -a . dist --exclude .git --exclude node_modules; else npx projen package-all; fi"
        }
      ]
    },
    "package-all": {
      "name": "package-all",
      "description": "Packages artifacts for all target languages"
    },
    "post-compile": {
      "name": "post-compile",
      "description": "Runs after successful compilation",
      "steps": [
        {
          "spawn": "docgen"
        }
      ]
    },
    "post-upgrade": {
      "name": "post-upgrade",
      "description": "Runs after upgrading dependencies"
    },
    "pre-compile": {
      "name": "pre-compile",
      "description": "Prepare the project for compilation"
    },
    "test": {
      "name": "test",
      "description": "Run tests",
      "steps": [
        {
          "exec": "jest --passWithNoTests --all --updateSnapshot"
        },
        {
          "spawn": "eslint"
        },
        {
          "spawn": "integ:seeder:assert"
        }
      ]
    },
    "test:update": {
      "name": "test:update",
      "description": "Update jest snapshots",
      "steps": [
        {
          "exec": "jest --updateSnapshot"
        }
      ]
    },
    "test:watch": {
      "name": "test:watch",
      "description": "Run jest in watch mode",
      "steps": [
        {
          "exec": "jest --watch"
        }
      ]
    },
    "upgrade": {
      "name": "upgrade",
      "description": "upgrade dependencies",
      "env": {
        "CI": "0"
      },
      "steps": [
        {
          "exec": "npm-check-updates --dep dev --upgrade --target=minor --reject='@aws-cdk/aws-glue-alpha,@aws-cdk/aws-kinesisfirehose-destinations-alpha,@aws-cdk/aws-lambda-go-alpha,aws-cdk-lib,constructs,projen'"
        },
        {
          "exec": "npm-check-updates --dep optional --upgrade --target=minor --reject='@aws-cdk/aws-glue-alpha,@aws-cdk/aws-kinesisfirehose-destinations-alpha,@aws-cdk/aws-lambda-go-alpha,aws-cdk-lib,constructs,projen'"
        },
        {
          "exec": "npm-check-updates --dep peer --upgrade --target=minor --reject='@aws-cdk/aws-glue-alpha,@aws-cdk/aws-kinesisfirehose-destinations-alpha,@aws-cdk/aws-lambda-go-alpha,aws-cdk-lib,constructs,projen'"
        },
        {
          "exec": "npm-check-updates --dep prod --upgrade --target=minor --reject='@aws-cdk/aws-glue-alpha,@aws-cdk/aws-kinesisfirehose-destinations-alpha,@aws-cdk/aws-lambda-go-alpha,aws-cdk-lib,constructs,projen'"
        },
        {
          "exec": "npm-check-updates --dep bundle --upgrade --target=minor --reject='@aws-cdk/aws-glue-alpha,@aws-cdk/aws-kinesisfirehose-destinations-alpha,@aws-cdk/aws-lambda-go-alpha,aws-cdk-lib,constructs,projen'"
        },
        {
          "exec": "yarn install --check-files"
        },
        {
          "exec": "yarn upgrade @aws-cdk/aws-glue-alpha @aws-cdk/aws-kinesisfirehose-destinations-alpha @aws-cdk/aws-lambda-go-alpha @types/cfn-response @types/jest @types/node @typescript-eslint/eslint-plugin @typescript-eslint/parser aws-cdk-lib aws-cdk constructs eslint-config-prettier eslint-import-resolver-node eslint-import-resolver-typescript eslint-plugin-import eslint-plugin-prettier eslint jest jest-junit jsii jsii-diff jsii-docgen jsii-pacmak json-schema npm-check-updates prettier ts-jest ts-node typescript @aws-cdk/aws-glue-alpha @aws-cdk/aws-kinesisfirehose-destinations-alpha @aws-cdk/aws-lambda-go-alpha aws-cdk-lib constructs @aws-cdk/aws-glue-alpha @aws-cdk/aws-kinesisfirehose-destinations-alpha @aws-cdk/aws-lambda-go-alpha aws-cdk-lib constructs"
        },
        {
          "exec": "npx projen"
        },
        {
          "spawn": "post-upgrade"
        }
      ]
    },
    "upgrade-projen": {
      "name": "upgrade-projen",
      "description": "upgrade projen",
      "env": {
        "CI": "0"
      },
      "steps": [
        {
          "exec": "npm-check-updates --dep dev --upgrade --target=minor --filter='projen'"
        },
        {
          "exec": "npm-check-updates --dep optional --upgrade --target=minor --filter='projen'"
        },
        {
          "exec": "npm-check-updates --dep peer --upgrade --target=minor --filter='projen'"
        },
        {
          "exec": "npm-check-updates --dep prod --upgrade --target=minor --filter='projen'"
        },
        {
          "exec": "npm-check-updates --dep bundle --upgrade --target=minor --filter='projen'"
        },
        {
          "exec": "yarn install --check-files"
        },
        {
          "exec": "yarn upgrade projen"
        },
        {
          "exec": "npx projen"
        },
        {
          "spawn": "post-upgrade"
        }
      ]
    },
    "watch": {
      "name": "watch",
      "description": "Watch & compile in the background",
      "steps": [
        {
          "exec": "jsii -w --silence-warnings=reserved-word --no-fix-peer-dependencies"
        }
      ]
    }
  },
  "env": {
    "PATH": "$(npx -c \"node -e \\\"console.log(process.env.PATH)\\\"\")"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \"npx projen\"."
}
